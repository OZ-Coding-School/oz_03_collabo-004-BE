# # version: "3.11"
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - DEV=true
    ports:
      - "8000:8000"
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./api:/app
      # - ./.coverage:/app/.coverage  # .coverage 파일 마운트 추가
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py runserver --noreload 0.0.0.0:8000"
    environment:
      - DB_HOST=${RDS_HOSTNAME} 
      - DB_NAME=${RDS_DB_NAME}
      - DB_USER=${RDS_USERNAME}
      - DB_PASSWORD=${RDS_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} 
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}  
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}  
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME} 
    user: django-user  # 컨테이너 내부에서 django-user로 실행
    env_file:
      - .env
    networks:
      - app_network

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    image: jenkins/jenkins:lts
    user: root  # Docker 소켓 접근을 위해 root 사용자로 실행
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker 소켓 공유
      - jenkins_home:/var/jenkins_home  
    networks:
      - app_network

  elasticsearch:
    build:
      context: .
      dockerfile: Dockerfile.elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - app_network

volumes:
  jenkins_home:
  es_data:

networks:
  app_network: